
스트림 - 스트리밍 가능한 소스로부터 핸들러에게 해당 데이터를 여러개의 청크로 나누어서 보내주는 형태
        파일, 네트워크에서 읽어올 수 있음
        여러가지 방식으로 만들어질 수 있고 여러가지 소스를 가질 수 있음

        큰 데이터를 처리해야하거나 비동기적으로 얻을 수 있는
        네트워크 인풋 등을 처리할 경우 유용하다.

        영상과 같은 큰 데이터를 처리할 때 스트림으로 쪼개서 처리하게 되면 프로그램이 사용하는 메모리가 줄어들게 되지만
        같은 동작을 실행할 수 있다.

        TCP socket 같은경우 언제 데이터가 올 지 알 수 없다. 이런 경우에는 비동기적으로 처리를 해야해서 청크 단위로 나누어서 처리해야함



스트림의 일반적인 구현 형태

const fs = require('fs')  // 버퍼단위로 읽어옴

const rs = fs.createReadStream('file.txt')  // 스트림 형태로 받음

rs.on('data', data => {

})

data, erro, end 등의 핸들러를 달아서 처리해야함
특별히 지정하지 않으면 데이터는 버퍼형태가 된다고 한다.

인코딩을 지정하면 스트링 형태로 받아올 수 있음

스트림의 종류

Readable, Writeble

Readable - 읽어낼 수 있는 스트림
fs.createReadStream
process.stdin (표준입력을 스트림으로 읽어냄)
서버 입장에서 HTTP 요청
클라이언트의 응답


Writeble - 출력할 수 있는 스트림
fs.createWriteStream
process.stdout
클라이언트 입장에서 HTTP 요청
서버 입장의 응답


Duplex Stream - 입력 출력 모두 가능
TCP socket - 네트워크를 통해서 입출력
zlib Stream - 압축 알고리즘이 적용된 스트림 
crypto stream - 암호와 알고리즘이 들어있는 모듈

Transfrom Stream - 입력받은 스트림을 변환해서 새로운 스트림으로 만들어줌
zlib stream - 입력이 압축
crpyto stream - 암호화를 거친 후에 나오게됨